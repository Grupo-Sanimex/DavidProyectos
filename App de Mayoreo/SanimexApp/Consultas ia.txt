verifica la estructura funcional de MapsSucursalScreen desde los componentes hasta los métodos implementados para lograr su resultado, voy a requerir que me crees un nuevo screen el cual va iniciar con el evento de click en una de las sucursales resultantes de MapsSucursalScreen el cual va realizar la petición a el endpoin de mi a api que es este  @GET("Ubicacion/VisitadorActivos") el cual requiere dos datos de entrada (string claveSucursal, string fechaUnitaria) en el cual tienes que mapear el siguiente resultado var response = new
{
    visitadorActivo = visitadorActivo.Select(visitador => new
    {
        claveSucursal = visitador.claveSucursal,
        numeroEmpleado = visitador.numeroEmpleado,
        nombre = visitador.nombre,
        aPaterno = visitador.aPaterno,
        aMaterno = visitador.aMaterno
    })
}; de igual forma aplicando un diseño atractivo verificar resultado


funciono, necesitó desarrollar otra screen que siga la misma estructura de navegación del archivo AppNavigation.kt de la clase sealed class AppScreens y el archivo que contiene los object object ScreenRoutes de navegación debe de incluirse esta nueva screen, la cual tiene que integrar los servicios de google maps y generar la ruta del recorrido por hora cronológica esta va recibir una lista de ubicaciones la cual contiene  dirección, latitud, longitud, horaUnitaria, cada ubicación de la ruta debe de mostrar la dirección y la hora, esta petición va iniciar con el evento de click en uno de los nombres resultantes de VisitadorActivoScreen el cual va realizar la petición a el endpoin de mi a api que es esta  @GET("Ubicacion/UbicacionesMaps") el cual requiere tres datos de entrada (string claveSucursal, string numeroEmpleado, string fechaUnitaria) en el cual tienes que mapear el siguiente resultado  var response = new
{
    ubicaciones = ubicacionesMaps.Select(ubicacion => new
    {
        id = ubicacion.id,
        direccion = ubicacion.direccion,
        latitud = ubicacion.latitud,
        longitud = ubicacion.longitud,
        horaUnitaria = ubicacion.horaUnitaria
    })
}; de igual forma aplicando un diseño atractivo

necesitó modificar las siguientes screens ya se genero la navegación en el archivo AppNavigation.kt de la clase sealed class AppScreens y el archivo que contiene los object object ScreenRoutes que ya están creadas para  composable(route = AppScreens.HistorialCotizacion.route) {} y composable(route = AppScreens.HistorialCotizacionDetalle.route) {} en el archivo AppNavigation.kt solo se debe de agregar el envió del parámetro idCotizacion para realizar la consulta a la enpoint @GET("Carrito/CotizacionDetalle") de la api, se debe de generar un diseño atractivo para el usuario en la screen HisCotizacionScreen.kt la cual recibe una lista llamada HisCotizacionM la cual contiene los siguientes parámetros idCotizacion, totalCotizacion, idClienteSAP, status, fecha, hora, idventa del cual en el diseño es muy importante destacar de alguna forma quizá con color verde y rojo dependiendo de su status si es A se destaca con rojo si el status es V se destaca con verde la información mas importante a mostrar en la lista de cotizaciones es idCotizacion, la hora, idClienteSAP además si V mostrar el idventa, si es A no mostrar idventa, después agrega el evento de click en las cotizaciones resultantes de HisCotizacionScreen.kt el cual va realizar la petición a el endpoin de mi a api que es este  @GET("Carrito/CotizacionDetalle") el cual requiere un dato de entrada (string idCotizacion) en el cual ya se mapeo el resultado en el archivo HisCtoDetalleResponseDto el cual recibe una lista de producto con el modelo HisCotizacionDetalle en la screen HisCtoDetalleScreen.kt en la cual se tiene que mostrar una lista detallada de la cotización parecido a la screen CartScreen.kt se debe de destacar primero el nombreCliente y su clasificación solo una vez después listar los productos, la imagen se forma con el codigo del producto + jpg de igual forma aplicando un diseño atractivo





@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VisitadorActivoScreen(
    onNavigationBack: () -> Unit,
    onNavigateToRuta: (String) -> Unit,
    claveSucursal: String,
    fecha: String,
    viewModel: VisitadorActivoViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()

    LaunchedEffect(key1 = true) {
        viewModel.getVisitadores(claveSucursal, fecha)
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Sucursal ${uiState.claveSucursal}",
                        color = MaterialTheme.colorScheme.onBackground,
                        style = MaterialTheme.typography.titleMedium,
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onNavigationBack) {
                        Icon(
                            painter = painterResource(id = R.drawable.back_icon),
                            contentDescription = "Regresar"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp)
        ) {
            // Fecha seleccionada
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            ) {
                Text(
                    text = "Fecha: ${uiState.fecha}",
                    modifier = Modifier.padding(16.dp),
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            when {
                uiState.isLoading -> {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        CircularProgressIndicator()
                    }
                }
                uiState.error != null -> {
                    ErrorMessage(
                        message = uiState.error!!,
                        onRetry = { 
                            viewModel.getVisitadores(uiState.claveSucursal, uiState.fecha)
                        }
                    )
                }
                uiState.visitadores.isEmpty() -> {
                    EmptyState()
                }
                else -> {
                    LazyColumn(
                        verticalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        items(uiState.visitadores) { visitador ->
                            VisitadorCard(
                                visitador = visitador,
                                onClick = { onNavigateToRuta(visitador.numeroEmpleado) }
                            )
                        }
                        item {
                            Spacer(modifier = Modifier.height(16.dp))
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun VisitadorCard(
    visitador: VisitadorActivo,
    onClick: (String) -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Avatar del visitador
            Box(
                modifier = Modifier
                    .size(50.dp)
                    .background(
                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),
                        shape = CircleShape
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = visitador.nombre.first().toString(),
                    style = MaterialTheme.typography.titleLarge,
                    color = MaterialTheme.colorScheme.primary
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = "${visitador.nombre} ${visitador.aPaterno} ${visitador.aMaterno}",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Text(
                    text = "No. Empleado: ${visitador.numeroEmpleado}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
private fun EmptyState() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Icon(
                imageVector = Icons.Default.Person,
                contentDescription = null,
                modifier = Modifier.size(64.dp),
                tint = MaterialTheme.colorScheme.onSurfaceVariant
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "No hay visitadores activos",
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
private fun ErrorMessage(
    message: String,
    onRetry: () -> Unit
) {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Icon(
            imageVector = Icons.Default.Warning,
            contentDescription = null,
            modifier = Modifier.size(64.dp),
            tint = MaterialTheme.colorScheme.error
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.error,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = onRetry,
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.error
            )
        ) {
            Text("Reintentar")
        }
    }
} 
